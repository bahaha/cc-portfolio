---
import Layout from "@/layouts/DefaultLayout.astro";
import Section from "@/kata/scroll-spy/astro/section.astro";
import Skeleton from "@/kata/scroll-spy/astro/skeleton.astro";

type Section = {
    label: string;
    title: string;
    height: number;
    heading?: "h1" | "h2" | "h3" | "h4" | "h5";
};

const article: Section[] = [
    {
        label: "what_requests_use_cors",
        title: "What requests use CORS?",
        height: 376,
    },
    { label: "functional_overview", title: "Functional overview", height: 400 },
    {
        label: "examples_of_access_control_scenarios",
        title: "Examples of access control scenarios",
        height: 56,
    },
    {
        label: "simple_requests",
        title: "Simple requests",
        height: 3885,
        heading: "h3",
    },
    {
        label: "preflighted_requests",
        title: "Preflighted Requests",
        height: 5469,
        heading: "h3",
    },
    {
        label: "requests_with_credentials",
        title: "Requests with credentials",
        height: 3850,
        heading: "h3",
    },
    {
        label: "the_http_response_headers",
        title: "The HTTP response headers",
        height: 140,
        heading: "h3",
    },
    {
        label: "access-control-allow-origin",
        title: "Access-Control-Allow-Origin",
        height: 680,
        heading: "h3",
    },
    {
        label: "access-control-expose-headers",
        title: "Access-Control-Expose-Headers",
        height: 484,
        heading: "h3",
    },
    {
        label: "access-control-max-age",
        title: "Access-Control-Max-Age",
        height: 281,
        heading: "h3",
    },
    {
        label: "access-control-allow-credentials",
        title: "Access-Control-Allow-Credentials",
        height: 393,
        heading: "h3",
    },
    {
        label: "access-control-allow-methods",
        title: "Access-Control-Allow-Methods",
        height: 337,
        heading: "h3",
    },
    {
        label: "access-control-allow-headers",
        title: "Access-Control-Allow-Headers",
        height: 249,
        heading: "h3",
    },
    {
        label: "the_http_request_headers",
        title: "The HTTP request headers",
        height: 147,
    },
    { label: "origin", title: "Origin", height: 433, heading: "h3" },
    {
        label: "access-control-request-method",
        title: "Access-Control-Request-Method",
        height: 281,
        heading: "h3",
    },
    {
        label: "access-control-request-headers",
        title: "Access-Control-Request-Headers",
        height: 337,
        heading: "h3",
    },
    { label: "specifications", title: "Specifications", height: 115 },
    {
        label: "browser_compatibility",
        title: "Browser Compatibility",
        height: 382,
    },
    { label: "see_also", title: "See Also", height: 388 },
];
---

<script>
    (() => {
        const toc = document.querySelector("[data-role=toc]");
        if (!toc) return;

        const FORWARD_TOP_THRESHOLD = 300;
        const BACKWARD_HEIGHT_RATIO = 0.618;
        const { anchors, sectionTitles } = readPageAnchors();

        listenClickOnAnchors(anchors);
        window.addEventListener("scroll", debounce(handlePageScroll, 100));
        handlePageScroll();

        function handlePageScroll() {
            // approach I: use page y offset to find the active section; pageYOffset is deprecated
            // const yOffset = document.documentElement.scrollTop;

            // approach II: find the active section by calculating the rect of boundary sections with offset
            // binary search can be used to optimize the search if the anchors are sorted which is the common case
            let lo = 0;
            let hi = sectionTitles.length;

            let topSectionIndex: number = -1;
            while (lo < hi) {
                const mid = lo + Math.floor((hi - lo) / 2);
                const rect = sectionTitles[mid].getBoundingClientRect();
                const isSectionNearTop =
                    rect.top >= 0 && rect.top <= FORWARD_TOP_THRESHOLD;

                if (
                    isSectionNearTop ||
                    isNextSectionOutOfViewport(rect.top, mid)
                ) {
                    topSectionIndex = mid;
                    hi = mid;
                } else if (rect.bottom < 0) {
                    lo = mid + 1;
                } else {
                    hi = mid;
                }
            }

            if (topSectionIndex === -1) {
                // TODO: find an approach to handle the case when only part of bottom of section are visible.
                return;
            }

            highlight(anchors[topSectionIndex]);

            function isNextSectionOutOfViewport(top: number, index: number) {
                if (top >= 0) return false;
                const nextRect =
                    sectionTitles[index + 1]?.getBoundingClientRect();
                if (!nextRect) return false;
                return (
                    nextRect.top >
                    document.documentElement.clientHeight *
                        BACKWARD_HEIGHT_RATIO
                );
            }
        }

        function readPageAnchors() {
            const anchors = document.querySelectorAll(
                "[data-role=toc] a[href^='#']",
            );
            const sectionTitles = [];

            for (const anchor of anchors) {
                const titleEl = document.querySelector(
                    anchor.getAttribute("href")!,
                ) as HTMLElement | null;
                if (titleEl) {
                    sectionTitles.push(titleEl);
                }
                // TODO: find a approach to calculate the height threshold of each section
                //  to easy find the active section by height => height > yOffset + OFFSET_THRESHOLD,
            }

            return { anchors, sectionTitles };
        }

        function listenClickOnAnchors(elements: NodeListOf<Element>) {
            for (const el of elements) {
                el.addEventListener("click", (e) => {
                    if (e.target) {
                        highlight(e.target as HTMLElement);
                    }
                });
            }
        }

        function highlight(selector: string | Element) {
            const highlightClass: string[] = ["text-primary"];
            if (!toc) return;
            const activeItem = toc.querySelector("[data-state=active]");
            if (activeItem) {
                activeItem.removeAttribute("data-state");
                activeItem.classList.remove(...highlightClass);
            }

            let el: HTMLElement | null;
            if (typeof selector === "string") {
                selector = selector.replace("#", "");
                el = toc.querySelector(`a[href='#${selector}']`);
            } else {
                el = selector;
            }

            if (!el) return;

            el.setAttribute("data-state", "active");
            el.classList.add(...highlightClass);
        }

        function debounce(fn, delay: number) {
            let timeout: NodeJS.Timeout | undefined;
            return function _debounce(...args: any[]) {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    fn(...args);
                }, delay);
            };
        }
    })();
</script>
<Layout title="Scroll Spy ðŸ‘€">
    <section class="container flex h-screen gap-8 py-8">
        <main class="flex h-fit gap-8">
            <article>
                <header>
                    <h1>Cross-Origin Resource Sharing (CORS)</h1>
                </header>
                <Skeleton height={1090} />
                {
                    article.map(({ label, title, height, heading }) => (
                        <Section label={label} title={title} heading={heading}>
                            <Skeleton height={height} />
                        </Section>
                    ))
                }
            </article>

            <aside data-role="toc" class="sticky top-8 w-fit self-start">
                <nav>
                    <header>
                        <h2>In this article</h2>
                    </header>
                    <ul class="mt-6 !list-none border-l-2 pl-6">
                        <li>
                            <a href="#what_requests_use_cors">
                                What requests use CORS?
                            </a>
                        </li>
                        <li>
                            <a href="#functional_overview"
                                >Functional Overview</a
                            >
                        </li>
                        <li>
                            <a href="#examples_of_access_control_scenarios">
                                Examples of access control scenarios
                            </a>
                        </li>
                        <li>
                            <a href="#the_http_response_headers"
                                >The HTTP response headers
                            </a>
                        </li>
                        <li>
                            <a href="#the_http_request_headers">
                                The HTTP request headers
                            </a>
                        </li>
                        <li>
                            <a href="#specifications">Sepcifications</a>
                        </li>
                        <li>
                            <a href="#browser_compatibility">
                                Browser Compatibility
                            </a>
                        </li>
                        <li>
                            <a href="#see_also">See Also</a>
                        </li>
                    </ul>
                </nav>
            </aside>
        </main>
    </section>

    <style>
        h1 {
            @apply scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl;
        }
        h2 {
            @apply mt-10 scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight transition-colors [&:first-child]:mt-0;
        }
        p {
            @apply leading-7 [&:not(:first-child)]:mt-6;
        }
        ul {
            @apply my-6 ml-6 list-disc [&>li]:mt-2;
        }

        html {
            scroll-behavior: smooth;
        }
    </style>
</Layout>
